<?php
session_start();
require_once 'config/database.php';

// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—Ç–∏–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
header("Cache-Control: no-cache, no-store, must-revalidate");
header("Pragma: no-cache");
header("Expires: 0");

if (!isset($_SESSION['user_id'])) {
    header('Location: index.php');
    exit;
}
// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤—å—Ç–µ:
try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ STATUS –≤ —Ç–∞–±–ª–∏—Ü–µ
    $check_column = $pdo->query("SHOW COLUMNS FROM users LIKE 'STATUS'");
    $STATUS_column_exists = $check_column->rowCount() > 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ avatar –≤ —Ç–∞–±–ª–∏—Ü–µ
    $check_avatar = $pdo->query("SHOW COLUMNS FROM users LIKE 'avatar'");
    $avatar_column_exists = $check_avatar->rowCount() > 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è is_vip –∏ is_moderator
    $check_vip = $pdo->query("SHOW COLUMNS FROM users LIKE 'is_vip'");
    $vip_column_exists = $check_vip->rowCount() > 0;
    
    $check_moderator = $pdo->query("SHOW COLUMNS FROM users LIKE 'is_moderator'");
    $moderator_column_exists = $check_moderator->rowCount() > 0;
    
    // –ï—Å–ª–∏ –ø–æ–ª—è avatar –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!$avatar_column_exists) {
        $pdo->exec("ALTER TABLE users ADD COLUMN avatar VARCHAR(255) DEFAULT NULL");
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—è is_vip –∏ is_moderator –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö
    if (!$vip_column_exists) {
        $pdo->exec("ALTER TABLE users ADD COLUMN is_vip BOOLEAN DEFAULT FALSE");
    }
    
    if (!$moderator_column_exists) {
        $pdo->exec("ALTER TABLE users ADD COLUMN is_moderator BOOLEAN DEFAULT FALSE");
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    $stmt = $pdo->prepare("
        SELECT u.*, 
               COUNT(p.id) as photos_count,
               COALESCE(AVG(r.rating), 0) as avg_rating,
               COUNT(r.id) as ratings_received
        FROM users u 
        LEFT JOIN photos p ON u.id = p.user_id 
        LEFT JOIN ratings r ON p.id = r.photo_id 
        WHERE u.id = ?
        GROUP BY u.id
    ");
    
    $stmt->execute([$_SESSION['user_id']]);
    $user = $stmt->fetch();
    
    if (!$user) {
        die('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª–µ STATUS —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ $user
    if (!isset($user['STATUS'])) {
        $user['STATUS'] = '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—è is_vip –∏ is_moderator —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!isset($user['is_vip'])) {
        $user['is_vip'] = false;
    }
    
    if (!isset($user['is_moderator'])) {
        $user['is_moderator'] = false;
    }
    
} catch (PDOException $e) {
    die('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' . $e->getMessage());
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ STATUS –≤ —Ç–∞–±–ª–∏—Ü–µ
    $check_column = $pdo->query("SHOW COLUMNS FROM users LIKE 'STATUS'");
    $STATUS_column_exists = $check_column->rowCount() > 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ avatar –≤ —Ç–∞–±–ª–∏—Ü–µ
    $check_avatar = $pdo->query("SHOW COLUMNS FROM users LIKE 'avatar'");
    $avatar_column_exists = $check_avatar->rowCount() > 0;
    
    // –ï—Å–ª–∏ –ø–æ–ª—è avatar –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!$avatar_column_exists) {
        $pdo->exec("ALTER TABLE users ADD COLUMN avatar VARCHAR(255) DEFAULT NULL");
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    $stmt = $pdo->prepare("
        SELECT u.*, 
               COUNT(p.id) as photos_count,
               COALESCE(AVG(r.rating), 0) as avg_rating,
               COUNT(r.id) as ratings_received
        FROM users u 
        LEFT JOIN photos p ON u.id = p.user_id 
        LEFT JOIN ratings r ON p.id = r.photo_id 
        WHERE u.id = ?
        GROUP BY u.id
    ");
    
    $stmt->execute([$_SESSION['user_id']]);
    $user = $stmt->fetch();
    
    if (!$user) {
        die('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª–µ STATUS —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ $user
    if (!isset($user['STATUS'])) {
        $user['STATUS'] = '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
    
} catch (PDOException $e) {
    die('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' . $e->getMessage());
}
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–æ—Ñ–∏–ª—å - Roster</title>
    <link rel="stylesheet" href="style.css?v=<?= time() ?>">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <a href="index.php" style="display: flex; align-items: center; gap: 10px; text-decoration: none; color: inherit;">
                    <i class="fas fa-heart"></i>
                    <span>Roster</span>
                </a>
            </div>
           <div class="user-header-main">
    <div class="user-info-compact">
        <?php if ($user['avatar']): ?>
        <img src="avatars/<?= htmlspecialchars($user['avatar']) ?>?t=<?= time() ?>" alt="–ê–≤–∞—Ç–∞—Ä" class="user-avatar">
        <?php else: ?>
        <div class="user-avatar"><?= strtoupper(substr($_SESSION['user_name'], 0, 1)) ?></div>
        <?php endif; ?>
        <a href="profile.php" class="user-name-link"><?= htmlspecialchars($_SESSION['user_name']) ?></a>
        
        <!-- –ë–µ–π–¥–∂–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –≤ —Ö–µ–¥–µ—Ä–µ -->
        <?php 
        $is_vip = isset($user['is_vip']) ? $user['is_vip'] : false;
        $is_moderator = isset($user['is_moderator']) ? $user['is_moderator'] : false;
        
        if ($user['is_admin']): ?>
            <a href="admin_panel.php" class="admin-badge">üëë –ê–¥–º–∏–Ω</a>
        <?php elseif ($is_moderator): ?>
            <span class="moderator-badge">‚ö° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</span>
        <?php elseif ($is_vip): ?>
            <span class="vip-badge">‚≠ê VIP</span>
        <?php endif; ?>
    </div>
    <a href="index.php" class="btn btn-outline">–ì–ª–∞–≤–Ω–∞—è</a>
    <a href="logout.php" class="btn btn-outline">–í—ã–π—Ç–∏</a>
</div>
        </header>

        <div class="profile-section">
            <div class="profile-header">
    <div class="profile-avatar-container">
        <?php if ($user['avatar']): ?>
        <img src="avatars/<?= htmlspecialchars($user['avatar']) ?>?t=<?= time() ?>" alt="–ê–≤–∞—Ç–∞—Ä" class="profile-avatar-img" id="profile-avatar-img">
        <?php else: ?>
        <div class="profile-avatar" id="profile-avatar-text">
            <?= strtoupper(substr($user['name'], 0, 1)) ?>
        </div>
        <?php endif; ?>
        <div class="avatar-actions">
            <button class="btn btn-outline btn-small" id="change-avatar-btn">
                <i class="fas fa-camera"></i> –°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
            </button>
            <?php if ($user['avatar']): ?>
            <button class="btn btn-outline btn-small btn-danger" id="remove-avatar-btn">
                <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
            </button>
            <?php endif; ?>
        </div>
        <input type="file" id="avatar-input" accept="image/*" style="display: none;">
    </div>
    <div class="profile-info">
        <h2><?= htmlspecialchars($user['name']) ?></h2>
        <p>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: <?= date('d.m.Y', strtotime($user['created_at'])) ?></p>
        
        <!-- –ë–ª–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ -->
        <div class="user-status">
            <div class="status-editable" id="status-display">
                <span class="status-text"><?= htmlspecialchars($user['STATUS']) ?></span>
                <button class="status-edit-btn" id="edit-status-btn">
                    <i class="fas fa-edit"></i> –ò–∑–º–µ–Ω–∏—Ç—å
                </button>
            </div>
            
            <form class="status-edit-form" id="status-edit-form">
                <input type="text" class="status-edit-input" id="status-input" 
                value="<?= htmlspecialchars($user['STATUS']) ?>" 
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å" maxlength="255">
                <div class="status-edit-actions">
                    <button type="submit" class="save-status-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button type="button" class="cancel-status-btn">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </form>
        </div>
        
        <!-- –ë–µ–π–¥–∂ —Ä–æ–ª–∏ -->
        <div class="user-role-display">
            <?php 
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π is_vip –∏ is_moderator
            $is_vip = isset($user['is_vip']) ? $user['is_vip'] : false;
            $is_moderator = isset($user['is_moderator']) ? $user['is_moderator'] : false;
            
            if ($user['is_admin']): ?>
                <span class="user-role-badge role-admin">üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>
            <?php elseif ($is_moderator): ?>
                <span class="user-role-badge role-moderator">‚ö° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</span>
            <?php elseif ($is_vip): ?>
                <span class="user-role-badge role-vip">‚≠ê VIP –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>
            <?php else: ?>
                <span class="user-role-badge role-user">üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>
            <?php endif; ?>
        </div>
    </div>
</div>

            <div class="profile-stats">
                <div class="profile-stat">
                    <div class="stat-value"><?= number_format($user['avg_rating'], 1) ?></div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
                </div>
                <div class="profile-stat">
                    <div class="stat-value"><?= $user['ratings_received'] ?></div>
                    <div class="stat-label">–û—Ü–µ–Ω–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ</div>
                </div>
            </div>
        </div>

        <!-- –°–µ–∫—Ü–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
        <section class="top-photos-section">
            <h2 class="section-title">–ú–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</h2>
            <div class="top-photos-container" id="user-photos-container">
                <!-- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ JavaScript -->
            </div>
        </section>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ -->
    <div class="modal-overlay" id="crop-modal">
        <div class="modal">
            <button class="modal-close" id="crop-close">&times;</button>
            <h2 class="modal-title">–û–±—Ä–µ–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏</h2>
            <div class="crop-container">
                <img id="crop-image" src="" alt="–û–±—Ä–µ–∑–∫–∞">
            </div>
            <div class="crop-actions">
                <button class="btn btn-outline" id="cancel-crop">–û—Ç–º–µ–Ω–∞</button>
                <button class="btn btn-primary" id="save-crop">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É</button>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏
        const changeAvatarBtn = document.getElementById('change-avatar-btn');
        const removeAvatarBtn = document.getElementById('remove-avatar-btn');
        const avatarInput = document.getElementById('avatar-input');
        const profileAvatarImg = document.getElementById('profile-avatar-img');
        const profileAvatarText = document.getElementById('profile-avatar-text');
        const cropModal = document.getElementById('crop-modal');
        const cropImage = document.getElementById('crop-image');
        const cancelCrop = document.getElementById('cancel-crop');
        const saveCrop = document.getElementById('save-crop');
        const cropClose = document.getElementById('crop-close');

        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        const statusDisplay = document.getElementById('status-display');
        const statusEditForm = document.getElementById('status-edit-form');
        const statusInput = document.getElementById('status-input');
        const editStatusBtn = document.getElementById('edit-status-btn');
        const cancelStatusBtn = statusEditForm ? statusEditForm.querySelector('.cancel-status-btn') : null;

        let cropper;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∫–∏
        if (changeAvatarBtn) {
            changeAvatarBtn.addEventListener('click', function() {
                avatarInput.click();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        if (avatarInput) {
            avatarInput.addEventListener('change', function(e) {
                if (this.files && this.files[0]) {
                    const file = this.files[0];
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                    if (!file.type.match('image.*')) {
                        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
                    if (file.size > 5 * 1024 * 1024) {
                        showNotification('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 'error');
                        return;
                    }
                    
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
                        cropImage.src = e.target.result;
                        cropModal.classList.add('active');
                        
                        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–µ–∑–∫—É
                        setTimeout(() => {
                            if (cropper) {
                                cropper.destroy();
                            }
                            cropper = new Cropper(cropImage, {
                                aspectRatio: 1,
                                viewMode: 1,
                                autoCropArea: 0.8,
                                responsive: true,
                                restore: false,
                                guides: true,
                                center: true,
                                highlight: false,
                                cropBoxMovable: true,
                                cropBoxResizable: true,
                                toggleDragModeOnDblclick: false,
                            });
                        }, 100);
                    };
                    
                    reader.readAsDataURL(file);
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
        if (removeAvatarBtn) {
            removeAvatarBtn.addEventListener('click', function() {
                if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É?')) {
                    return;
                }
                
                removeAvatar();
            });
        }

        // –û—Ç–º–µ–Ω–∞ –æ–±—Ä–µ–∑–∫–∏
        if (cancelCrop) {
            cancelCrop.addEventListener('click', function() {
                cropModal.classList.remove('active');
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
            });
        }

        if (cropClose) {
            cropClose.addEventListener('click', function() {
                cropModal.classList.remove('active');
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
            });
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
       // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
if (saveCrop) {
    saveCrop.addEventListener('click', function() {
        if (!cropper) {
            showNotification('–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏', 'error');
            return;
        }
        
        const saveBtn = this;
        const originalText = saveBtn.textContent;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        saveBtn.disabled = true;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const canvas = cropper.getCroppedCanvas({
                width: 200,
                height: 200,
                imageSmoothingEnabled: true,
                imageSmoothingQuality: 'high'
            });
            
            canvas.toBlob(function(blob) {
                const formData = new FormData();
                formData.append('avatar', blob, 'avatar.jpg');
                
                fetch('update_avatar.php', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        updateAvatarDisplay(data.avatar_url);
                        cropModal.classList.remove('active');
                        if (cropper) {
                            cropper.destroy();
                            cropper = null;
                        }
                        showNotification('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
                    } else {
                        showNotification('–û—à–∏–±–∫–∞: ' + (data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                    }
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: ' + error.message, 'error');
                })
                .finally(() => {
                    saveBtn.textContent = originalText;
                    saveBtn.disabled = false;
                });
            }, 'image/jpeg', 0.9);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏:', error);
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            saveBtn.textContent = originalText;
            saveBtn.disabled = false;
        }
    });
}

        // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
       function updateAvatarDisplay(avatarUrl) {
    const timestamp = '?t=' + new Date().getTime();
    const fullAvatarUrl = avatarUrl + timestamp;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    if (profileAvatarImg) {
        profileAvatarImg.src = fullAvatarUrl;
    } else if (profileAvatarText) {
        profileAvatarText.style.display = 'none';
        const img = document.createElement('img');
        img.src = fullAvatarUrl;
        img.alt = '–ê–≤–∞—Ç–∞—Ä';
        img.className = 'profile-avatar-img';
        img.id = 'profile-avatar-img';
        profileAvatarText.parentNode.appendChild(img);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ö–µ–¥–µ—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è
    updateHeaderAvatar(fullAvatarUrl);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ index.php
    broadcastAvatarUpdate(avatarUrl);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if (!removeAvatarBtn) {
        const removeBtn = document.createElement('button');
        removeBtn.className = 'btn btn-outline btn-small btn-danger';
        removeBtn.id = 'remove-avatar-btn';
        removeBtn.innerHTML = '<i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å';
        removeBtn.addEventListener('click', function() {
            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É?')) {
                return;
            }
            removeAvatar();
        });
        document.querySelector('.avatar-actions').appendChild(removeBtn);
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
function removeAvatar() {
    fetch('remove_avatar.php', {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            if (profileAvatarImg) {
                profileAvatarImg.remove();
            }
            if (profileAvatarText) {
                profileAvatarText.style.display = 'flex';
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ö–µ–¥–µ—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è
            removeHeaderAvatar();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ index.php
            broadcastAvatarRemoval();
            
            // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            const removeBtn = document.getElementById('remove-avatar-btn');
            if (removeBtn) {
                removeBtn.remove();
            }
            
            showNotification('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        } else {
            showNotification('–û—à–∏–±–∫–∞: ' + data.message, 'error');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', 'error');
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ —Ö–µ–¥–µ—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è
function updateHeaderAvatar(avatarUrl) {
    const headerAvatar = document.querySelector('.user-info-compact .user-avatar');
    if (headerAvatar) {
        if (headerAvatar.tagName === 'DIV') {
            headerAvatar.style.display = 'none';
            const img = document.createElement('img');
            img.src = avatarUrl;
            img.alt = '–ê–≤–∞—Ç–∞—Ä';
            img.className = 'user-avatar';
            headerAvatar.parentNode.insertBefore(img, headerAvatar);
        } else if (headerAvatar.tagName === 'IMG') {
            headerAvatar.src = avatarUrl;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–∑ —Ö–µ–¥–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
function removeHeaderAvatar() {
    const headerAvatar = document.querySelector('.user-info-compact .user-avatar');
    if (headerAvatar && headerAvatar.tagName === 'IMG') {
        headerAvatar.remove();
        const userInfoCompact = document.querySelector('.user-info-compact');
        const userNameLink = document.querySelector('.user-name-link');
        const userName = userNameLink ? userNameLink.textContent.trim() : 'U';
        
        const div = document.createElement('div');
        div.className = 'user-avatar';
        div.textContent = userName.charAt(0).toUpperCase();
        userInfoCompact.insertBefore(div, userNameLink);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–∂–≤–∫–ª–∞–¥–∫–æ–≤–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
function broadcastAvatarUpdate(avatarUrl) {
    localStorage.setItem('avatarUpdated', JSON.stringify({ 
        avatarUrl: avatarUrl,
        timestamp: new Date().getTime()
    }));
    setTimeout(() => localStorage.removeItem('avatarUpdated'), 100);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
function broadcastAvatarRemoval() {
    localStorage.setItem('avatarRemoved', JSON.stringify({
        timestamp: new Date().getTime()
    }));
    setTimeout(() => localStorage.removeItem('avatarRemoved'), 100);
}

// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
window.addEventListener('storage', function(e) {
    if (e.key === 'avatarUpdated') {
        const data = JSON.parse(e.newValue);
        if (data.avatarUrl) {
            updateAvatarDisplay(data.avatarUrl);
        }
    }
    
    if (e.key === 'avatarRemoved') {
        removeAvatar();
    }
});

        // === –ö–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ ===
        if (editStatusBtn && statusDisplay && statusEditForm && cancelStatusBtn) {
            // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            editStatusBtn.addEventListener('click', function() {
                statusDisplay.style.display = 'none';
                statusEditForm.style.display = 'block';
                statusInput.focus();
                statusInput.select();
            });

            // –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            cancelStatusBtn.addEventListener('click', function() {
                statusDisplay.style.display = 'flex';
                statusEditForm.style.display = 'none';
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                statusInput.value = statusDisplay.querySelector('.status-text').textContent;
            });

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            statusEditForm.addEventListener('submit', function(e) {
                e.preventDefault();
                saveUserStatus();
            });

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter –∏ –æ—Ç–º–µ–Ω–∞ –ø—Ä–∏ Escape
            statusInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    saveUserStatus();
                } else if (e.key === 'Escape') {
                    cancelStatusBtn.click();
                }
            });
        }

        async function saveUserStatus() {
            const newStatus = statusInput.value.trim();
            const saveBtn = statusEditForm.querySelector('.save-status-btn');
            const originalText = saveBtn.textContent;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (newStatus.length > 255) {
                showNotification('–°—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)', 'error');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            saveBtn.disabled = true;

            try {
                const response = await fetch('update_user_status.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `status=${encodeURIComponent(newStatus)}`
                });

                const data = await response.json();

                if (data.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å
                    const statusText = statusDisplay.querySelector('.status-text');
                    statusText.textContent = newStatus || '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                    statusDisplay.style.display = 'flex';
                    statusEditForm.style.display = 'none';
                    
                    showNotification('–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
                showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', 'error');
            } finally {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                saveBtn.textContent = originalText;
                saveBtn.disabled = false;
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        function showNotification(message, type = 'info') {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const existingNotifications = document.querySelectorAll('.custom-notification');
            existingNotifications.forEach(notification => notification.remove());

            const notification = document.createElement('div');
            notification.className = `custom-notification ${type}`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
                color: white;
                padding: 15px 20px;
                border-radius: 5px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10000;
                max-width: 300px;
                animation: slideIn 0.3s ease-out;
            `;
            
            notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 10px;">
                    <i class="fas ${type === 'success' ? 'fa-check' : type === 'error' ? 'fa-exclamation-triangle' : 'fa-info'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.animation = 'slideOut 0.3s ease-in';
                    setTimeout(() => notification.remove(), 300);
                }
            }, 5000);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        function loadUserPhotos() {
            fetch('get_user_photos.php')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('user-photos-container');
                    if (!container) return;
                    
                    container.innerHTML = '';
                    
                    if (data.photos && data.photos.length > 0) {
                        data.photos.forEach(photo => {
                            const photoCard = document.createElement('div');
                            photoCard.className = 'top-photo-card';
                            photoCard.innerHTML = `
                                <img src="uploads/${photo.filename}" alt="–§–æ—Ç–æ" class="top-photo-img">
                                <div class="top-photo-rating">
                                    <i class="fas fa-star"></i>
                                    <span>${photo.average_rating ? photo.average_rating.toFixed(1) : '–ù–µ—Ç'}</span>
                                </div>
                                <div class="top-photo-votes">
                                    <i class="fas fa-users"></i>
                                    <span>${photo.vote_count || 0}</span>
                                </div>
                                <div class="photo-card-content">
                                    <div class="photo-card-title">${photo.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
                                    <div style="font-size: 10px; color: #888; margin-top: 8px;">
                                        –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${new Date(photo.upload_date).toLocaleDateString()}
                                    </div>
                                </div>
                            `;
                            container.appendChild(photoCard);
                        });
                    } else {
                        container.innerHTML = '<div class="empty-state"><i class="fas fa-camera"></i><p>–í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</p></div>';
                    }
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
                    const container = document.getElementById('user-photos-container');
                    if (container) {
                        container.innerHTML = '<div class="empty-state"><i class="fas fa-exclamation-triangle"></i><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</p></div>';
                    }
                });
        }

        loadUserPhotos();
    });
    </script>
</body>
</html>